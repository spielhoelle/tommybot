name: Docker

on:
  push:
    branches: [ "main" ]
    # Publish semver tags as releases.
    tags: [ 'v*.*.*' ]
  pull_request:
    branches: [ "main" ]

env:
  # Use docker.io for Docker Hub if empty
  REGISTRY: ghcr.io
  # github.repository as <account>/<repo>
  IMAGE_NAME: ${{ github.repository }}
  PUBLIC_OLLAMA_BASE_URL: ${{ secrets.PUBLIC_OLLAMA_BASE_URL }}

jobs:
  cicd:

    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      id-token: write

    concurrency:
      group: ${{ github.ref }}
      cancel-in-progress: true

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      # Workaround: https://github.com/docker/build-push-action/issues/461
      - name: Setup Docker buildx
        uses: docker/setup-buildx-action@79abd3f86f79a9d68a23c75a09a9a85889262adf

      # Login against the Docker registry
      # https://github.com/docker/login-action
      - name: Log into registry ${{ env.REGISTRY }}
        uses: docker/login-action@28218f9b04b4f3f62068d7b6ce6ca5b26e35336c
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Extract metadata (tags, labels) for Docker
      # https://github.com/docker/metadata-action
      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@98669ae865ea3cffbcbaa878cf57c20bbf1c6c38
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}

      # Build and push Docker image with Buildx
      # https://github.com/docker/build-push-action
      - name: Build and push Docker image
        id: build-and-push
        uses: docker/build-push-action@ac9327eae2b366085ac7f6a2d02df8aa8ead720a
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: PUBLIC_OLLAMA_BASE_URL=${{ secrets.PUBLIC_OLLAMA_BASE_URL }}

      - uses: clowdhaus/argo-cd-action/@main
        if: startsWith(github.ref, 'refs/tags/v')
        with:
          version: 2.7.4
          command: app create tommybot
          options: >-
            --grpc-web
            --upsert
            --repo git@github.com:spielhoelle/infrastructure_k8.git
            --path kubernetes/charts/tommybot
            --revision ${{ github.ref_name }}
            --dest-server https://kubernetes.default.svc
            --dest-namespace llm
            --auth-token ${{ secrets.ARGOCD_AUTH_TOKEN }}
            --server c.tmy.io
            --project llm
            --sync-policy automated
            --helm-set ingress.enabled=true
            --helm-set image.tag=${{ github.ref_name }}@${{ steps.build-and-push.outputs.digest }}

      - uses: clowdhaus/argo-cd-action/@main
        if: github.ref == 'refs/heads/main'
        with:
          version: 2.7.4
          command: app create tommybot
          options: >-
            --grpc-web
            --upsert
            --repo git@github.com:spielhoelle/infrastructure_k8.git
            --path kubernetes/charts/tommybot
            --revision main
            --dest-server https://kubernetes.default.svc
            --dest-namespace llm
            --auth-token ${{ secrets.ARGOCD_AUTH_TOKEN }}
            --server c.tmy.io
            --project llm
            --sync-policy automated
            --helm-set ingress.enabled=true
            --helm-set ingress.hosts[0].host=tommybot.tmy.io
            --helm-set ingress.hosts[0].paths[0].path=/
            --helm-set ingress.hosts[0].paths[0].pathType=Prefix
            --helm-set ingress.tls[0].hosts[0]=tommybot.tmy.io
            --helm-set ingress.tls[0].secretName=tommybot-tls
            --helm-set image.tag=main@${{ steps.build-and-push.outputs.digest }}
